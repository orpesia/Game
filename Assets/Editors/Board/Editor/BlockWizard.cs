//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.18408
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

using UnityEngine;
using UnityEditor;

using Unnamed;

using Game;
using Game.Data;

namespace BoardEditor
{
	public class BlockWizard : ScriptableWizard
	{
		GameObject m_prefab = null;
		BlockDataSet m_dataset = null;

		string m_savePath = "";
		string m_blockSetName = "New block set";

		public BlockWizard ()
		{
		}

		[MenuItem("Assets/" + Named.Title + "/Block Editor")]
		static void OpenEditor()
		{
			GameObject targetObject = UnityEditor.Selection.activeObject as GameObject;
			if( null == targetObject || null == targetObject.GetComponent<BlockDataSet>() )
			{
				ShowWizard(null, Path.GetSelectionPath());
			}
			else
			{
				ShowWizard(targetObject, Path.GetSelectionPath());
			}

		}

		static void ShowWizard(GameObject prefab, string savePath)
		{
			BlockWizard blockWizard = DisplayWizard<BlockWizard>("Block Editor");
			blockWizard.minSize = blockWizard.maxSize = new Vector2(200, 840);
			blockWizard.m_savePath = savePath;
			blockWizard.m_prefab = prefab;
			if( null != prefab )
			{
				blockWizard.m_blockSetName = prefab.name;
				blockWizard.m_dataset = prefab.GetComponent<BlockDataSet>();
			}
		}

		void OnGUI()
		{
			EditorGUILayout.LabelField("Block Editor");

			m_blockSetName = EditorGUILayout.TextField( m_blockSetName );

			if( GUILayout.Button ("Create block set"))
			{
				string finalPath = AssetDatabaseHelper.MakePrefabPath(m_savePath, m_blockSetName);

				bool isContinue = true;
				if( true == AssetDatabaseHelper.IsExistAsset(finalPath) )
				{
					isContinue = EditorUtility.DisplayDialog("", "이대로 저장하면 기존 데이터를 덮어씁니다. 계속하시겠습니까?", "예", "아니오");
				}

				if( true == isContinue )
				{
					GameObject prefab = new GameObject(m_blockSetName);
					prefab.AddComponent<BlockDataSet>().name = m_blockSetName;

					m_prefab = AssetDatabaseHelper.CreatePrefab(finalPath, prefab);

					GameObject.DestroyImmediate(prefab);

					m_dataset = m_prefab.GetComponent<BlockDataSet>();

				}
			}

			if( null == m_prefab )
			{
				return ;
			}

			if( GUILayout.Button ("Save block set"))
			{
				EditorUtility.SetDirty(m_prefab);
				
				AssetDatabase.SaveAssets();
				AssetDatabase.Refresh();

			}

			bool isSelected = false;
			if( null == m_dataset.Atlas )
			{
				isSelected = GUILayout.Button ("Select atlas", GUILayout.Width (190), GUILayout.Height (190));
			}
			else
			{
				isSelected = GUILayout.Button (new GUIContent(m_dataset.Atlas.TargetTexture), GUILayout.Width (190), GUILayout.Height (190));
			}

			if(true == isSelected)
			{
				Action<TextureAtlas> selectCallback = (TextureAtlas atlas)=>
				{
					m_dataset.Atlas = atlas;

					Repaint();
				}; 

				SelectWizard.AtlasSelector(selectCallback);
			}


			Action<GenerateType> Callback = (GenerateType generate)=>
			{
				Action<TextureAtlas.Atlas> action = (TextureAtlas.Atlas atlas) =>
				{
					this.AddOrReplace(generate, atlas.name);
					
					Repaint ();
				};

				SelectWizard.SpriteSelector(m_dataset.Atlas, action);
			};

			BlockShareRender shareRenderer = new BlockShareRender(m_dataset, new Vector2(5, 300), 1.0f, Callback);
			shareRenderer.Draw(this);
		}

		void AddOrReplace(GenerateType generate, string name)
		{
			BlockCode code = BlockEnumSupporter.GetCode (generate);
			BlockDataSet.KeyValue keyValue = m_dataset.FindDataByCode(code);

			if( null == keyValue )
			{
				m_dataset.Data.Add (new BlockDataSet.KeyValue(code,name));
			}
			else
			{
				keyValue.name = name;
			}
		}

	}
}

